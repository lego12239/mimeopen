#!/usr/bin/tclsh
# Copyright (C) 2022-2023 Oleg O. Nemanov <lego12239@yandex.ru>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# https://github.com/lego12239/mimeopen

lappend auto_path ~/work/libs/tcl
package require getopt
package require simpleconf


set conf [dict create\
  term_cmd {xterm -e}\
  shell_cmd {sh -c}]
set MAILCAP_FILES [list $env(HOME)/.mailcap /etc/mailcap \
  /usr/share/etc/mailcap /usr/local/etc/mailcap]
#set MAILCAP_FILES [list $env(HOME)/.mailcap_test]

set debug 0
set dry_run 0
set opt_foreground 0
set opt_separate 0
set entries [dict create]
set fnames [dict create]
set fnames_order [list]
# Derived from [dict get $conf shell_cmd].
set shell_name ""


proc dbg_out {msg} {
	if {!$::debug} {
		return
	}
	puts "DBG: $msg"
}

proc err_out {msg} {
	puts stderr "ERR: $msg"
}

proc warn_out {msg} {
	puts stderr "WARN: $msg"
}

# Escape specified arguments to allow using with "exec {sh -c "$cmd"}".
# prms:
#  cmdargs - list with arguments
#  shell   - a shell with which a returned string will be used
#            (supported: sh, bash)
# ret:
#  STRING  - a string with escaped arguments separated by spaces
#
proc cmdargs_escape {cmdargs {shell sh}} {
	set res ""
	set space ""

	foreach arg $cmdargs {
		switch -exact $shell {
		sh -
		bash {
			set parts [split $arg ']
			append res "${space}'[lindex $parts 0]'"
			for {set i 1} {$i < [llength $parts]} {incr i} {
				append res "\\''[lindex $parts $i]'"
			}
		}
		default {
			error "Unknown shell: $shell"
		}
		}
		set space " "
	}

	return $res
}

proc is_run_from_term {} {
	set fconf [fconfigure stdin]
	if {![dict exists $fconf -mode]} {
		return 0
	}
	set fconf [fconfigure stdout]
	if {![dict exists $fconf -mode]} {
		return 0
	}
	return 1
}

proc mailcap_load {fnames} {
	while {[llength $fnames] != 0} {
		set fnames [lassign $fnames fname]
		mailcap_load_file $fname
	}
}

proc mailcap_load_file {fname} {
	set line ""
	set entry ""

	if {[catch {open $fname r} fh]} {
		if {([lindex $::errorCode 0] eq "POSIX") && ([lindex $::errorCode 1] eq "ENOENT")} {
			dbg_out "Can't open '$fname': no such file"
			return
		}
		err_out "Open error: '$fname': $fh"
		exit 1
	}
	dbg_out "Loading from '$fname'"

	set ctx [dict create\
	  src [dict create fname $fname fh $fh]\
	  buf ""\
	  pos 0\
	  tok_s 0\
	  lineno 0\
	  read_proc _gets_for_fh\
	  getsrcloc_proc _getsrcloc_for_fh]

	while {1} {
		set entry [mailcap_entry_parse ctx]
		if {[dict size $entry] == 0} {
			break
		}
		dbg_out "Entry: '$entry'"
		mailcap_entries_add $entry
	}
	close $fh
}

proc mailcap_entries_add {entry} {
	set vals [list]

	set mimetype [lindex [dict get $entry type] 0]
	if {[llength [dict get $entry type]] == 2} {
		set mimesubtype [lindex [dict get $entry type] 1]
	} else {
		set mimesubtype *
	}
	if {[dict exists $::entries $mimetype $mimesubtype]} {
		set vals [dict get $::entries $mimetype $mimesubtype]
	}
	lappend vals $entry
	dict set ::entries $mimetype $mimesubtype $vals
}

proc mailcap_entries_get {mimetype} {
	set entries_list [list]

	if {[dict exists $::entries {*}$mimetype]} {
		set entries_list [dict get $::entries {*}$mimetype]
	} elseif {[dict exists $::entries [lindex $mimetype 0] *]} {
		set entries_list [dict get $::entries [lindex $mimetype 0] *]
	} elseif {[dict exists $::entries * *]} {
		set entries_list [dict get $::entries * *]
	}

	return $entries_list
}

# Parse a one entry from a configured source.
# ret:
#  "" - source is empty, no any entries
#  DICT - parsed entry
proc mailcap_entry_parse {_ctx} {
	upvar $_ctx ctx
	set entry [mailcap_entry_create]
	set cmd ""
	# 0 - type field, 1 - command field, 2 - flag field
	set state 0
	set is_commented 0

#	dbg_out "mailcap_entry_parse enter: POS: [dict get $ctx pos]. BUF: '[dict get $ctx buf]'"
	while {[set tok [mailcap_entry_get_lexeme ctx]] >= 0} {
		set tok_str [string range [dict get $ctx buf] [dict get $ctx tok_s]\
		  [dict get $ctx pos]-1]
#		dbg_out "mailcap_entry_parse: $state: $tok: '${tok_str}'"
#		dbg_out "mailcap_entry_parse: BUF: '[dict get $ctx buf]'"
		if {$is_commented} {
			if {$tok == 3} {
				set is_commented 0
			}
			continue
		}
		switch $state {
		0 {
			switch $tok {
			0 {
				dict append entry type $tok_str
			}
			1 {
				if {[regexp {^[[:space:]]*$} [dict get $entry type]]} {
					warn_out [string cat \
					  [[dict get $ctx getsrcloc_proc] ctx]\
					  ": Empty type. Ignore this entry."]
					set entry [mailcap_entry_create]
					set is_commented 1
				} else {
					set str [string tolower [dict get $entry type]]
					set str [split $str /]
					if {[llength $str] > 0} {
						lset str 0 [string trim [lindex $str 0]]
					}
					if {[llength $str] > 1} {
						lset str 1 [string trim [lindex $str 1]]
					}
					dict set entry type $str
					set state 1
				}
			}
			3 {
				if {![regexp {^[[:space:]]*$} [dict get $entry type]]} {
					warn_out [string cat \
					  [[dict get $ctx getsrcloc_proc] ctx -1]\
					  ": No command. Ignore this entry."]
					set entry [mailcap_entry_create]
				}
				continue
			}
			4 {
				set is_commented 1
			}
			5 {
				dict append entry type [string index $tok_str 1]
			}
			6 {
				dict append entry type " "
			}
			7 {
				warn_out [string cat "[[dict get $ctx getsrcloc_proc] ctx]: "
				  "% sequence in a type field. Ignore this entry."]
				set entry [mailcap_entry_create]
				set is_commented 1
			}
			default {
				error "unknown state/tok combination: $state/$tok"
			}
			}
		}
		1 {
			switch $tok {
			0 {
				mailcap_entry_cmd_add_part cmd 0 $tok_str
			}
			1 {
				dict set entry cmd $cmd
				set cmd ""
				set state 2
			}
			3 {
				if {[mailcap_entry_cmd_is_empty $cmd]} {
					warn_out [string cat \
					  [[dict get $ctx getsrcloc_proc] ctx -1]\
					  ": Empty command. Ignore this entry."]
					set state 0
					set entry [mailcap_entry_create]
					set cmd ""
				} else {
					dict set entry cmd $cmd
					break
				}
			}
			4 {
				mailcap_entry_cmd_add_part cmd 0 $tok_str
			}
			5 {
				mailcap_entry_cmd_add_part cmd 0 [string index $tok_str 1]
			}
			6 {
				mailcap_entry_cmd_add_part cmd 0 " "
			}
			7 {
				if {[lsearch -exact "%s %S" $tok_str] >= 0} {
					dict set entry is_want_data_from_stdin 0
				}
				if {$tok_str eq "%S"} {
					dict set entry is_allow_manyfiles 1
				}
				mailcap_entry_cmd_add_part cmd 1 $tok_str
			}
			default {
				error "unknown state/tok combination: $state/$tok"
			}
			}
		}
		2 {
			switch $tok {
			0 {
				mailcap_entry_cmd_add_part cmd 0 $tok_str
			}
			1 -
			3 {
				set ret [mailcap_entry_set_field entry $cmd]
				if {$ret ne ""} {
					warn_out [string cat \
					  [[dict get $ctx getsrcloc_proc] ctx -1]\
					  $ret]
				}
				set cmd ""
				if {$tok == 3} {
					break
				}
			}
			4 {
				mailcap_entry_cmd_add_part cmd 0 $tok_str
			}
			5 {
				mailcap_entry_cmd_add_part cmd 0 [string index $tok_str 1]
			}
			6 {
				mailcap_entry_cmd_add_part cmd 0 " "
			}
			7 {
				mailcap_entry_cmd_add_part cmd 1 $tok_str
			}
			default {
				error "unknown state/tok combination: $state/$tok"
			}
			}
		}
		}
	}
	dict set ctx buf [string range [dict get $ctx buf]\
	  [dict get $ctx pos] end]
	dict set ctx pos 0

	if {$state == 0} {
		return ""
	}
	dict set entry src [[dict get $ctx getsrcloc_proc] ctx -1]
	return $entry
}

proc mailcap_entry_create {} {
	set entry [dict create \
	  type ""\
	  cmd ""\
	  src ""\
	  needsterminal 0\
	  is_want_data_from_stdin 1\
	  is_allow_manyfiles 0]

	return $entry
}

# Set a field(it can be flag or named field).
# prms:
#  _entry - entry var name
#  data   - a field text data
# ret:
#  "" - on ok
#  STRING - warn message on fail
proc mailcap_entry_set_field {_entry data} {
	upvar $_entry entry

	if {[mailcap_entry_cmd_is_flag $data]} {
		set flag [string tolower [string trim [lindex $data end 1]]]
		switch -exact $flag {
		"needsterminal" {
			dict set entry needsterminal 1
		}
		default {
			return ": Unknown flag '$flag'. Ignore it."
		}
		}
	} else {
		set field [mailcap_entry_cmd_split_nv $data]
		if {[llength $field] == 0} {
			return [string cat ": Unknown field format "\
			  "'[mailcap_entry_cmd_get_rawcmd $data]'. Ignore it."]
		}
		switch -exact [lindex $field 0] {
		default {
			return ": Unknown field '[lindex $field 0]'. Ignore it."
		}
		}
	}

	return ""
}

# Add a next part to a cmd
# prms:
#  _cmd - command var name
#  ptype  - a part type(0 - ordinary text, 1 - % sequence)
#  ptxt   - a part text
proc mailcap_entry_cmd_add_part {_cmd ptype ptxt} {
	upvar $_cmd cmd

	if {($ptype == 0) && ([llength $cmd] > 0)} {
		if {[lindex $cmd end 0] == 0} {
			lset cmd end 1 [string cat [lindex $cmd end 1] $ptxt]
			return
		}
	}
	lappend cmd [list $ptype $ptxt]
}

proc mailcap_entry_cmd_is_empty {cmd} {

	foreach part $cmd {
		if {[lindex $part 0] != 0} {
			return 0
		}
		if {![regexp {^[[:space:]]+$} [lindex $part 1]]} {
			return 0
		}
	}

	return 1
}

proc mailcap_entry_cmd_is_flag {cmd} {
	if {[llength $cmd] != 1} {
		return 0
	}
	if {[lindex $cmd 0 0] != 0} {
		return 0
	}
	if {[regexp {^[[:space:]]+$} [lindex $cmd 0 1]]} {
		return 0
	}
	if {[string first "=" [lindex $cmd 0 1]] >= 0} {
		return 0
	}

	return 1
}

# Split command to a field name and a command ("name=cmd").
# prms:
#  cmd - a command list
# ret:
#  "" - on format error(no "=", etc)
#  list - 1 item is a field name, 2 item is a command
proc mailcap_entry_cmd_split_nv {cmd} {
	if {[lindex $cmd 0 0] != 0} {
		return ""
	}
	set pos [string first "=" [lindex $cmd 0 1]]
	if {$pos < 0} {
		return ""
	}
	set fname [string trim [string range [lindex $cmd 0 1] 0 $pos-1]]
	set fname [string tolower $fname]
	lset cmd 0 1 [string range [lindex $cmd 0 1] $pos+1 end]

	return [list $fname $cmd]
}

proc mailcap_entry_cmd_get_rawcmd {cmd} {
	set cmd ""

	foreach part $cmd {
		switch -- [lindex $part 0] {
		0 -
		1 {
			append cmd [lindex $part 1]
		}
		default {
			error "Unknown cmd part type: [lindex $part 0]"
		}
		}
	}

	return $cmd
}

proc mailcap_entry_cmd_subs {entry {vals ""}} {
	set cmd ""

	foreach part [dict get $entry cmd] {
		switch -- [lindex $part 0] {
		0 {
			append cmd [lindex $part 1]
		}
		1 {
			if {[dict exists $vals [lindex $part 1]]} {
				if {[lindex $part 1] eq "%S"} {
					append cmd " [cmdargs_escape\
					  [dict get $vals [lindex $part 1]] $::shell_name]"
				} else {
					append cmd [dict get $vals [lindex $part 1]]
				}
			}
		}
		default {
			error "Unknown cmd part type: [lindex $part 0]"
		}
		}
	}

	return $cmd
}

# ret:
# -2 - incomplete \ or % sequence(there are no other chars in a buf)
# -1 - no data, empty buffer
#  0 - ordinary chars(use string trimright to remove possible spaces at the end)
#  1 - ;
#  3 - \n
#  4 - #
#  5 - \ + ANY_SINGLE_CHAR
#  6 - \ + \n
#  7 - % + ANY_SINGLE_CHAR
proc mailcap_entry_get_lexeme {_ctx} {
	upvar $_ctx ctx
	# 0 - start, 1 - ordinary char, 2 - \ sequence, 3 - % sequence
	set state 0
	set running 1

	dict set ctx tok_s [set i [dict get $ctx pos]]
	while {$running} {
		set len [string length [dict get $ctx buf]]
		for {} {$i < $len} {incr i} {
			set c [string index [dict get $ctx buf] $i]
			dict incr ctx pos
			switch $state {
			0 {
				switch $c {
				; {
					return 1
				}
				"\\" {
					set state 2
				}
				"\n" {
					return 3
				}
				"#" {
					return 4
				}
				"%" {
					set state 3
				}
				default {
					set state 1
				}
				}
			}
			1 {
				switch $c {
				; -
				"\\" -
				"\n" -
				"#" -
				"%" {
					dict incr ctx pos -1
					return 0
				}
				}
			}
			2 {
				if {$c eq "\n"} {
					return 6
				}
				return 5
			}
			3 {
				return 7
			}
			}
		}

		set ret [[dict get $ctx read_proc] ctx line]
		if {$ret < 0} {
			set running 0
		} else {
			if {[dict get $ctx lineno] > 1} {
				dict append ctx buf "\n"
			}
			dict append ctx buf "$line"
		}
	}
	switch $state {
	0 {
		return -1
	}
	1 {
		return 0
	}
	2 -
	3 {
		return -2
	}
	}
}

######################################################################
# ROUTINES FOR VARIOUS SOURCES
######################################################################
proc _gets_for_fh {_ctx _line} {
	upvar $_ctx ctx
	upvar $_line line

	dict incr ctx lineno
	return [gets [dict get $ctx src fh] line]
}

proc _getsrcloc_for_fh {_ctx {lineno_off 0}} {
	upvar $_ctx ctx

	set lineno [expr {[dict get $ctx lineno] + $lineno_off}]
	return "[dict get $ctx src fname]:$lineno"
}

######################################################################
# MAILCAP RUN ROUTINES
######################################################################
proc mailcap_open {mimetype fname} {
	set entries_list [mailcap_entries_get $mimetype]
	if {[llength $entries_list] == 0} {
		err_out [string cat "Don't know how to open "\
		  [join $mimetype "/"] ": " $fname]
		return
	}

	set err_msg ""
	foreach entry $entries_list {
		set vals [dict create \
		  "%s" $fname\
		  "%S" [list $fname]\
		  "%t" [join $mimetype "/"]]
		dbg_out "Try use for '$fname' entry '$entry'"
		set cmd [mailcap_entry_cmd_subs $entry $vals]
		dbg_out "Try open '$fname' with command \"$cmd\""

		if {[dict get $entry is_want_data_from_stdin]} {
			set ret [_mailcap_open_any $entry $cmd $fname]
		} else {
			set ret [_mailcap_open_any $entry $cmd]
		}
		if {[lindex $ret 0] == 0} {
			return
		} elseif {[lindex $ret 0] == -1} {
			append err_msg "cmd \"$cmd\" fail with error message:\
			  [lindex $ret 1]\n"
		}
	}
	if {$::dry_run} {
		return
	}
	err_out $err_msg
}

proc mailcap_open_many {mimetype fnames} {
	set entries_list [mailcap_entries_get $mimetype]
	if {[llength $entries_list] == 0} {
		err_out [string cat "Don't know how to open "\
		  [join $mimetype "/"] ": " $fnames]
		return
	}

	set err_msg ""
	foreach entry $entries_list {
		dbg_out "Try use for '$fnames' entry '$entry'"
		if {([dict get $entry is_allow_manyfiles]) &&
		    (![dict get $entry is_want_data_from_stdin])} {
			set vals [dict create \
			  "%S" $fnames\
			  "%t" [join $mimetype "/"]]
			set cmd [mailcap_entry_cmd_subs $entry $vals]
			dbg_out "Try open '$fnames' with command \"$cmd\""
			set ret [_mailcap_open_any $entry $cmd]
			if {[lindex $ret 0] == 0} {
				return
			} elseif {[lindex $ret 0] == -1} {
				append err_msg "cmd \"$cmd\" fail with error message:\
				  [lindex $ret 1]\n"
			}
		} else {
			foreach fname $fnames {
				mailcap_open $mimetype $fname
			}
			return
		}
	}
	if {$::dry_run} {
		return
	}
	err_out $err_msg
}

proc _mailcap_open_any {entry cmd {fname ""}} {
	set exec_args [list {*}[dict get $::conf shell_cmd] "$cmd"]
	if {([dict get $entry needsterminal]) && (![is_run_from_term])} {
		set exec_args [linsert $exec_args 0 {*}[dict get $::conf term_cmd]]
	}
	if {$fname ne ""} {
		lappend exec_args <$fname >@stdout
	} else {
		lappend exec_args >@stdout
	}
	if {!$::opt_foreground} {
		if {(![dict get $entry needsterminal]) || (![is_run_from_term])} {
			lappend exec_args "&"
		}
	}
	if {$::dry_run} {
		puts "CMD: \"$cmd\""
		return [list 1]
	} else {
		if {[catch {exec {*}$exec_args} res]} {
			dbg_out "cmd \"$cmd\" fail with error message: $res"
			return [list -1 $res]
		}
	}
	return [list 0]
}

######################################################################
# MIME TYPE ROUTINES
######################################################################
proc mimetype_parse {str} {
	set type [dict create]

	set pos [string first ";" $str]
	set parts [split [string range $str 0 $pos-1] /]
	dict lappend type type [string tolower [string trim [lindex $parts 0]]]
	dict lappend type type [string tolower [string trim [lindex $parts 1]]]

	set parts [split [string range $str $pos+1 end] ";"]
	foreach part $parts {
		set pos [string first = $part]
		dict set type prms \
		  [string tolower [string trim [string range $part 0 $pos-1]]]\
		  [string trim [string range $part $pos+1 end]]
	}

	return $type
}

proc parse_opts {} {
	global argv
	set optsspec {
	  "-s --separate --separately" 0
	  "-f --foreground" 0
	  "-d --debug" 0
	  "--dry-run" 0
	  "-v --version" 0
	  "-h --help" 0}

	set ctx [getopt::mkctx $optsspec {err_on_unknown_opt 1}]

	while {[llength [set ov [getopt::next ctx argv]]] > 0} {
		switch -glob -- [lindex $ov 0] {
		"-s --separate --separately" {
			set ::opt_separate 1
		}
		"-f --foreground" {
			set ::opt_foreground 1
		}
		"-d --debug" {
			set ::debug 1
		}
		"--dry-run" {
			set ::dry_run 1
		}
		"-v --version" {
			puts "0.4"
			exit
		}
		"-h --help" {
			puts "USAGE: [file tail $::argv0] FILE_NAME ..."
			puts " Options:"
			puts "  -s, --separate"
			puts "               open each file separately"
			puts "  -f, --foreground"
			puts "               open files in the foreground"
			puts "  -d, --debug  output debug info"
			puts "  --dry-run    output view command without executing"
			puts "  -v, --version"
			puts "               output a version"
			puts "  -h, --help   output this help"
			exit
		}
		}
	}

}


######################################################################
# MAIN
######################################################################
parse_opts

if {[file exists $env(HOME)/.mimeopen.conf]} {
	set conf [simpleconf::load_from_file -default $conf\
	  $env(HOME)/.mimeopen.conf]
}
set shell_name [lindex [dict get $::conf shell_cmd] 0]
set shell_name [string range $shell_name [string last / $shell_name]+1 end]

if {[llength [array names env -exact MAILCAPS]] == 1} {
	set MAILCAP_FILES [split $env(MAILCAPS) ":"]
}
dbg_out "MAILCAP_FILES=$MAILCAP_FILES"

mailcap_load $MAILCAP_FILES
dbg_out "ENTRIES=$entries"

foreach fname $argv {
	set mimetype [mimetype_parse [exec file -L -b -i $fname]]
	dbg_out "mimetype for '$fname' is '$mimetype'"
	if {$opt_separate} {
		mailcap_open [dict get $mimetype type] $fname
	} else {
		if {[dict exists $fnames [dict get $mimetype type]]} {
			dict lappend fnames [dict get $mimetype type] $fname
		} else {
			dict set fnames [dict get $mimetype type] [list $fname]
			lappend fnames_order [dict get $mimetype type]
		}
	}
}

if {!$opt_separate} {
	foreach mimetype $fnames_order {
		mailcap_open_many $mimetype [dict get $fnames $mimetype]
	}
}
